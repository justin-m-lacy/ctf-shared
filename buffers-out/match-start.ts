// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MatchState } from '../ctf/match-state';


export class MatchStart {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):MatchStart {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMatchStart(bb:flatbuffers.ByteBuffer, obj?:MatchStart):MatchStart {
  return (obj || new MatchStart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMatchStart(bb:flatbuffers.ByteBuffer, obj?:MatchStart):MatchStart {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatchStart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state(obj?:MatchState):MatchState|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MatchState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startMatchStart(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stateOffset, 0);
}

static endMatchStart(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMatchStart(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset):flatbuffers.Offset {
  MatchStart.startMatchStart(builder);
  MatchStart.addState(builder, stateOffset);
  return MatchStart.endMatchStart(builder);
}
}
