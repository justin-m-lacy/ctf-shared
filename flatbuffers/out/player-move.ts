// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec2 } from '../ctf/vec2';


export class PlayerMove {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerMove {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerMove(bb:flatbuffers.ByteBuffer, obj?:PlayerMove):PlayerMove {
  return (obj || new PlayerMove()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerMove(bb:flatbuffers.ByteBuffer, obj?:PlayerMove):PlayerMove {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerMove()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

who():string|null
who(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
who(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

when():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

to(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startPlayerMove(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addWho(builder:flatbuffers.Builder, whoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, whoOffset, 0);
}

static addWhen(builder:flatbuffers.Builder, when:number) {
  builder.addFieldInt32(1, when, 0);
}

static addTo(builder:flatbuffers.Builder, toOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, toOffset, 0);
}

static endPlayerMove(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
