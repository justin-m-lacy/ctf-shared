// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MessageContent, unionToMessageContent, unionListToMessageContent } from '../ctf/message-content';


export class CtfMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):CtfMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCtfMessage(bb:flatbuffers.ByteBuffer, obj?:CtfMessage):CtfMessage {
  return (obj || new CtfMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCtfMessage(bb:flatbuffers.ByteBuffer, obj?:CtfMessage):CtfMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CtfMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

contentType():MessageContent {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MessageContent.NONE;
}

content<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

when():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startCtfMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addContentType(builder:flatbuffers.Builder, contentType:MessageContent) {
  builder.addFieldInt8(0, contentType, MessageContent.NONE);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, contentOffset, 0);
}

static addWhen(builder:flatbuffers.Builder, when:number) {
  builder.addFieldInt32(2, when, 0);
}

static endCtfMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCtfMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedCtfMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createCtfMessage(builder:flatbuffers.Builder, contentType:MessageContent, contentOffset:flatbuffers.Offset, when:number):flatbuffers.Offset {
  CtfMessage.startCtfMessage(builder);
  CtfMessage.addContentType(builder, contentType);
  CtfMessage.addContent(builder, contentOffset);
  CtfMessage.addWhen(builder, when);
  return CtfMessage.endCtfMessage(builder);
}
}
