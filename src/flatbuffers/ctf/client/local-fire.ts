// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec2 } from '../../ctf/vec2';


export class LocalFire {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):LocalFire {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLocalFire(bb:flatbuffers.ByteBuffer, obj?:LocalFire):LocalFire {
  return (obj || new LocalFire()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLocalFire(bb:flatbuffers.ByteBuffer, obj?:LocalFire):LocalFire {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LocalFire()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

at(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

orientation(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startLocalFire(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAt(builder:flatbuffers.Builder, atOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, atOffset, 0);
}

static addOrientation(builder:flatbuffers.Builder, orientationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, orientationOffset, 0);
}

static endLocalFire(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
